import os
import json
import asyncio
from datetime import datetime, time, timedelta
try:
    from zoneinfo import ZoneInfo
except ImportError:
    from backports.zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile, BotCommand
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, JobQueue, ConversationHandler, MessageHandler, filters
)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7742690883:AAFClrtlv4YYlKzFTI5oID6yWkTqke0SBV4')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SETTING_REMINDER_TIME = 0
SETTING_CUSTOM_GLOBAL_TIME = 1
SELECT_PERIOD, SELECT_HABIT_FOR_STATS = 2, 3
RENAMING_HABIT = 4

def load_data():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        script_dir = os.path.dirname(os.path.abspath(__file__))
        habits_file = os.path.join(script_dir, 'habits.json')
        if os.path.exists(habits_file):
            with open(habits_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            return data
        return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def save_data(data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        script_dir = os.path.dirname(os.path.abspath(__file__))
        habits_file = os.path.join(script_dir, 'habits.json')
        with open(habits_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_user_data(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {"habits": {}}
    return data[str(user_id)]

def update_user_data(user_id, user_data):
    data = load_data()
    data[str(user_id)] = user_data
    save_data(data)

def _create_habit_list_message(user_id):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫."""
    user_data = get_user_data(user_id)
    habits = user_data.get('habits', {})

    if not habits:
        return {
            "text": "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å –Ω–æ–≤—É—é, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –º–Ω–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
            "reply_markup": None,
            "parse_mode": 'Markdown'
        }

    today = datetime.now().strftime('%Y-%m-%d')
    list_text = "üìã **–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
    
    for habit_name, habit_info in habits.items():
        if isinstance(habit_info, dict):
            dates = habit_info.get('dates', [])
        else:
            dates = habit_info
        
        is_done_today = today in dates
        status_emoji = "‚úÖ" if is_done_today else "‚è≥"
        
        list_text += f"{status_emoji} **{habit_name}**\n\n"

    buttons = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="menu_today"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
        ],
        [
            InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ", callback_data="menu_manage"),
            InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="menu_reminder")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="menu_add")
        ]
    ]
    
    return {
        "text": list_text,
        "reply_markup": InlineKeyboardMarkup(buttons),
        "parse_mode": 'Markdown'
    }

async def _send_habit_list(query_or_update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫."""
    if hasattr(query_or_update, 'from_user'):
        user_id = query_or_update.from_user.id
    elif hasattr(query_or_update, 'effective_user'):
        user_id = query_or_update.effective_user.id
    else:
        # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        user_id = query_or_update.from_user.id if hasattr(query_or_update, 'from_user') else None
    
    message_data = _create_habit_list_message(user_id)
    
    if hasattr(query_or_update, 'edit_message_text'):
        await query_or_update.edit_message_text(**message_data)
    else:
        await query_or_update.message.reply_text(**message_data)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await setup_commands(context.application)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ /start - –ê–°–ò–ù–•–†–û–ù–ù–û
        if not hasattr(context.application, '_reminders_restored'):
            print("[INIT] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ...")
            await restore_reminders_async(context)
            context.application._reminders_restored = True
        
        welcome_text = """
ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫**

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–µ.

–ù–∏–∂–µ —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫.
        """
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        await list_habits(update, context)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def list_habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_data = _create_habit_list_message(user_id)
    await update.message.reply_text(**message_data)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_habits(update, context)

# ===== –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–í–´–ß–ï–ö =====

async def add_habit_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫."""
    habit = update.message.text.strip()
    if not habit:
        return

    user_id = update.effective_user.id
    user_data = get_user_data(user_id)

    if habit in user_data.get('habits', {}):
        await update.message.reply_text(f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª —É–∂–µ –µ—Å—Ç—å.")
        return

    user_data.setdefault('habits', {})[habit] = {
        "dates": [],
        "reminder_time": None
    }
    update_user_data(user_id, user_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    context.user_data['new_habit'] = habit
    
    buttons = [
        [InlineKeyboardButton("–î–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="new_habit_set_time")],
        [InlineKeyboardButton("–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="new_habit_skip")]
    ]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ===== –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =====

async def handle_new_habit_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    habit = context.user_data.get('new_habit')
    if not habit:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    if query.data == "new_habit_skip":
        await query.edit_message_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        context.user_data.pop('new_habit', None)
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await _send_habit_list(query, context)
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
    context.user_data['setting_time_for'] = habit
    
    buttons = [
        [InlineKeyboardButton("üåÖ –£—Ç—Ä–æ (09:00)", callback_data="time_09:00")],
        [InlineKeyboardButton("üåô –í–µ—á–µ—Ä (23:00)", callback_data="time_23:00")],
        [InlineKeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="time_cancel")]
    ]
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    
    return SETTING_REMINDER_TIME

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    habit = context.user_data.get('setting_time_for') or context.user_data.get('new_habit')
    if not habit:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    if query.data == "time_cancel":
        await query.edit_message_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
        context.user_data.pop('new_habit', None)
        context.user_data.pop('setting_time_for', None)
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await _send_habit_list(query, context)
        return ConversationHandler.END
    
    if query.data == "time_custom":
        await query.edit_message_text(
            "‚è∞ **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
            "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            parse_mode='Markdown'
        )
        return SETTING_REMINDER_TIME
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if query.data.startswith("time_"):
        time_str = query.data.replace("time_", "")
        if time_str == "disable":
            await disable_habit_reminder(query, context, habit)
        else:
            await save_habit_reminder_time(query, context, habit, time_str)
        return ConversationHandler.END

async def handle_custom_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    time_str = update.message.text.strip()
    habit = context.user_data.get('setting_time_for') or context.user_data.get('new_habit')
    
    if not habit:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    try:
        time_obj = datetime.strptime(time_str, '%H:%M').time()
        time_str = time_obj.strftime('%H:%M')
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return SETTING_REMINDER_TIME
    
    await save_habit_reminder_time(update, context, habit, time_str)
    return ConversationHandler.END

async def save_habit_reminder_time(query_or_update, context: ContextTypes.DEFAULT_TYPE, habit: str, time_str: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏."""
    if hasattr(query_or_update, 'from_user'):
        user_id = query_or_update.from_user.id
    elif hasattr(query_or_update, 'effective_user'):
        user_id = query_or_update.effective_user.id
    else:
        user_id = None
    
    user_data = get_user_data(user_id)
    
    if habit in user_data.get('habits', {}):
        if isinstance(user_data['habits'][habit], dict):
            user_data['habits'][habit]['reminder_time'] = time_str
        else:
            user_data['habits'][habit] = {
                'dates': user_data['habits'][habit],
                'reminder_time': time_str
            }
        
        update_user_data(user_id, user_data)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if schedule_reminder(context, user_id, habit, time_str):
            message = f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ ¬´{habit}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}!"
        else:
            message = f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –¥–ª—è ¬´{habit}¬ª –Ω–∞ {time_str}."
        
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(message)
        else:
            await query_or_update.message.reply_text(message)
        
        context.user_data.pop('new_habit', None)
        context.user_data.pop('setting_time_for', None)
        
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await _send_habit_list(query_or_update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        error_message = f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if hasattr(query_or_update, 'edit_message_text'):
            await query_or_update.edit_message_text(error_message)
        else:
            await query_or_update.message.reply_text(error_message)
        
        context.user_data.pop('new_habit', None)
        context.user_data.pop('setting_time_for', None)
        await _send_habit_list(query_or_update, context)

async def disable_habit_reminder(query, context, habit):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if habit in user_data.get('habits', {}):
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        job_name = f"reminder_{user_id}_{habit}"
        for job in context.application.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        if isinstance(user_data['habits'][habit], dict):
            user_data['habits'][habit]['reminder_time'] = None
        else:
            user_data['habits'][habit] = {
                'dates': user_data['habits'][habit],
                'reminder_time': None
            }
        
        update_user_data(user_id, user_data)
        
        await query.edit_message_text(f"üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ ¬´{habit}¬ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        
        context.user_data.pop('new_habit', None)
        context.user_data.pop('setting_time_for', None)
        
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await _send_habit_list(query, context)
    else:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await _send_habit_list(query, context)

async def cancel_reminder_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    habit = context.user_data.get('setting_time_for') or context.user_data.get('new_habit')
    
    if habit:
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ ¬´{habit}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")
    else:
        await update.message.reply_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    context.user_data.pop('new_habit', None)
    context.user_data.pop('setting_time_for', None)
    await list_habits(update, context)
    return ConversationHandler.END

def schedule_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int, habit: str, time_str: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        if ':' not in time_str:
            print(f"[REMINDER] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
            return False
            
        hour, minute = map(int, time_str.split(':'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        if not (0 <= hour <= 23) or not (0 <= minute <= 59):
            print(f"[REMINDER] –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {hour}:{minute}")
            return False
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è —è–≤–Ω–æ
        moscow_tz = ZoneInfo('Europe/Moscow')
        reminder_time = time(hour, minute, tzinfo=moscow_tz)
        job_name = f"reminder_{user_id}_{habit}"
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
        for job in context.job_queue.jobs():
            if job.name == job_name:
                job.schedule_removal()
                print(f"[REMINDER] –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job_name}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        job = context.job_queue.run_daily(
            send_reminder,
            reminder_time,
            data={'user_id': user_id, 'habit': habit},
            name=job_name
        )
        
        print(f"[REMINDER] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {time_str} (MSK) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏–≤—ã—á–∫–∞ '{habit}'")
        try:
            next_run = job.next_run_time
            print(f"[REMINDER] Job ID: {job.name}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}")
        except AttributeError:
            print(f"[REMINDER] Job ID: {job.name}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)")
        return True
    except Exception as e:
        print(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        import traceback
        print(f"[REMINDER] Traceback: {traceback.format_exc()}")
        return False

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    job = context.job
    user_id = job.data['user_id']
    habit = job.data['habit']
    
    now = datetime.now()
    moscow_now = datetime.now(ZoneInfo('Europe/Moscow'))
    
    print(f"[REMINDER] ‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –ø—Ä–∏–≤—ã—á–∫–∞ '{habit}'")
    print(f"[REMINDER] –í—Ä–µ–º—è: UTC {now}, MSK {moscow_now}")
    
    try:
        user_data = get_user_data(user_id)
        today = datetime.now().strftime('%Y-%m-%d')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if habit not in user_data.get('habits', {}):
            print(f"[REMINDER] ‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        habit_info = user_data['habits'][habit]
        if isinstance(habit_info, dict):
            dates = habit_info.get('dates', [])
        else:
            dates = habit_info
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
        if today in dates:
            print(f"[REMINDER] ‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        print(f"[REMINDER] üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø—Ä–∏–≤—ã—á–∫–µ '{habit}'")
        
        buttons = [[
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"reminder_done|{habit}"),
            InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="reminder_skip")
        ]]
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ –ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É ¬´{habit}¬ª!",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        print(f"[REMINDER] ‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"[REMINDER] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        import traceback
        print(f"[REMINDER] Traceback: {traceback.format_exc()}")

async def restore_reminders_async(context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("[REMINDER] –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    try:
        data = load_data()
        restored_count = 0
        
        for user_id, user_data in data.items():
            habits = user_data.get('habits', {})
            
            for habit_name, habit_info in habits.items():
                if isinstance(habit_info, dict):
                    reminder_time = habit_info.get('reminder_time')
                    if reminder_time:
                        print(f"[REMINDER] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –ø—Ä–∏–≤—ã—á–∫–∞ '{habit_name}', –≤—Ä–µ–º—è {reminder_time}")
                        if schedule_reminder(context, int(user_id), habit_name, reminder_time):
                            restored_count += 1
                        else:
                            print(f"[REMINDER] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_id}:{habit_name}")
        
        print(f"[REMINDER] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        print(f"[REMINDER] –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:")
        for job in context.job_queue.jobs():
            if job.name and job.name.startswith('reminder_'):
                try:
                    next_run = job.next_run_time
                    print(f"[REMINDER]   - {job.name}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ {next_run}")
                except AttributeError:
                    print(f"[REMINDER]   - {job.name}: —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)")
        
    except Exception as e:
        print(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        import traceback
        print(f"[REMINDER] Traceback: {traceback.format_exc()}")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def restore_reminders(context):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    import asyncio
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(restore_reminders_async(context))
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        print("[REMINDER] Fallback –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        try:
            data = load_data()
            restored_count = 0
            
            for user_id, user_data in data.items():
                habits = user_data.get('habits', {})
                
                for habit_name, habit_info in habits.items():
                    if isinstance(habit_info, dict):
                        reminder_time = habit_info.get('reminder_time')
                        if reminder_time:
                            if schedule_reminder(context, int(user_id), habit_name, reminder_time):
                                restored_count += 1
            
            print(f"[REMINDER] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)")
            
        except Exception as e:
            print(f"[REMINDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö =====

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
        if query.data.startswith('menu_'):
            action = query.data.split('_', 1)[1]
            if action == 'add':
                await query.edit_message_text("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:")
            elif action == 'list':
                await _send_habit_list(query, context)
            elif action == 'today':
                await handle_today_menu(query, context)
            elif action == 'stats':
                await stats_entry(query, context)
            elif action == 'reminder':
                await reminder_menu(query, context)
            elif action == 'manage':
                await manage_menu(query, context)
            elif action == 'undo':
                await show_undo_menu(query, context)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif query.data.startswith('stats_'):
            period = query.data.split('_', 1)[1]
            await show_stats(query, context, period)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif query.data == 'clear_stats_menu':
            await clear_stats_menu(query, context)
            
        elif query.data.startswith('clear_habit|'):
            habit_name = query.data.split('|', 1)[1]
            await clear_habit_confirm(query, context, habit_name)
            
        elif query.data.startswith('confirm_clear_habit|'):
            habit_name = query.data.split('|', 1)[1]
            await confirm_clear_habit(query, context, habit_name)
            
        elif query.data == 'clear_all_habits':
            await clear_all_habits_confirm(query, context)
            
        elif query.data == 'confirm_clear_all':
            await confirm_clear_all(query, context)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        elif query.data.startswith('edit_habit|'):
            habit_name = query.data.split('|', 1)[1]
            await edit_habit_menu(query, context, habit_name)
            
        elif query.data.startswith('delete_habit|'):
            habit_name = query.data.split('|', 1)[1]
            await delete_habit_confirm(query, context, habit_name)
            
        elif query.data.startswith('confirm_delete|'):
            habit_name = query.data.split('|', 1)[1]
            await confirm_delete_habit(query, context, habit_name)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
        elif query.data.startswith('rename_habit|'):
            # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ConversationHandler
            pass
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        elif query.data.startswith('change_reminder|'):
            # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ConversationHandler
            pass
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        elif query.data.startswith('set_reminder|'):
            # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ConversationHandler
            pass

        # –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–Ω–µ ConversationHandler (–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)
        elif query.data.startswith('time_') and query.data.endswith('_back'):
            action = query.data.replace('time_', '').replace('_back', '')
            if action == 'cancel':
                await _send_habit_list(query, context)

        # –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elif query.data.startswith("done|"):
            habit_name = query.data.split('|')[1]
            await mark_habit_done(query, context, habit_name)
            
        # –û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elif query.data.startswith("undo|"):
            habit_name = query.data.split('|')[1]
            await mark_habit_undone(query, context, habit_name)
            
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        elif query.data.startswith("reminder_done|"):
            habit = query.data.split('|', 1)[1]
            await mark_habit_done(query, context, habit)
            
        elif query.data == "reminder_skip":
            await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")

    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
        print(f"Callback data: {query.data}")
        print(f"Traceback: {traceback.format_exc()}")
        try:
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as edit_error:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            try:
                await query.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as reply_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")

async def handle_today_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return

    today = datetime.now().strftime('%Y-%m-%d')
    uncompleted_habits = []
    completed_habits = []
    
    for habit_name, habit_info in habits.items():
        dates = habit_info.get('dates', []) if isinstance(habit_info, dict) else habit_info
        if today not in dates:
            uncompleted_habits.append(habit_name)
        else:
            completed_habits.append(habit_name)

    if not uncompleted_habits:
        message = "üéâ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è!"
    else:
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"
    
    buttons = []
    for habit in uncompleted_habits:
        buttons.append([InlineKeyboardButton(habit, callback_data=f"done|{habit}")])
    
    if completed_habits:
        buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="menu_undo")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")])
    
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(buttons))

async def mark_habit_done(query, context, habit_name):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if habit_name in user_data['habits']:
        today = datetime.now().strftime('%Y-%m-%d')
        habit_info = user_data['habits'][habit_name]
        
        if isinstance(habit_info, dict):
            if today not in habit_info.get('dates', []):
                habit_info.setdefault('dates', []).append(today)
                update_user_data(user_id, user_data)
        else:
            if today not in habit_info:
                habit_info.append(today)
                update_user_data(user_id, user_data)
    
    await _send_habit_list(query, context)

async def mark_habit_undone(query, context, habit_name):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if habit_name in user_data['habits']:
        today = datetime.now().strftime('%Y-%m-%d')
        habit_info = user_data['habits'][habit_name]
        
        if isinstance(habit_info, dict):
            if today in habit_info.get('dates', []):
                habit_info['dates'].remove(today)
                update_user_data(user_id, user_data)
        else:
            if today in habit_info:
                habit_info.remove(today)
                update_user_data(user_id, user_data)
    
    await _send_habit_list(query, context)

# ===== –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await handle_today_menu(update, context)

async def debug_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_reminders = []
    all_jobs = []
    
    for job in context.application.job_queue.jobs():
        all_jobs.append(f"Job: {job.name}, next_run: {job.next_run_time}")
        if job.name and job.name.startswith(f'reminder_{user_id}_'):
            habit_name = job.name.replace(f'reminder_{user_id}_', '')
            user_reminders.append(f"‚Ä¢ {habit_name}: {job.next_run_time}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(user_id)
    db_reminders = []
    
    for habit_name, habit_info in user_data.get('habits', {}).items():
        if isinstance(habit_info, dict) and habit_info.get('reminder_time'):
            db_reminders.append(f"‚Ä¢ {habit_name}: {habit_info['reminder_time']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    now_utc = datetime.now()
    now_moscow = datetime.now(ZoneInfo('Europe/Moscow'))
    
    message = f"üîß **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
    message += f"**–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:**\n"
    message += f"‚Ä¢ UTC: {now_utc.strftime('%Y-%m-%d %H:%M:%S')}\n"
    message += f"‚Ä¢ MSK: {now_moscow.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    
    message += f"**–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:**\n"
    if user_reminders:
        message += "\n".join(user_reminders)
    else:
        message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    message += f"\n\n**–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:**\n"
    if db_reminders:
        message += "\n".join(db_reminders)
    else:
        message += "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    message += f"\n\n**–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:** {len(all_jobs)}"
    message += f"\n**–í–∞—à ID:** {user_id}"
    message += f"\n**Timezone –±–æ—Ç–∞:** {context.application.timezone}"
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"""
    user_id = update.effective_user.id
    
    try:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        test_time = datetime.now() + timedelta(minutes=1)
        
        job = context.job_queue.run_once(
            send_test_reminder,
            when=test_time,
            data={'user_id': user_id},
            name=f"test_reminder_{user_id}"
        )
        
        await update.message.reply_text(
            f"üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ**\n\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.\n"
            f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {test_time.strftime('%H:%M:%S')}\n\n"
            f"–ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            parse_mode='Markdown'
        )
        
        print(f"[TEST] –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {test_time}")
        
    except Exception as e:
        print(f"[TEST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
        )

async def test_immediate_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ MSK
        now = datetime.now(ZoneInfo('Europe/Moscow'))
        print(f"[TEST] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è MSK: {now}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
        next_minute = now.replace(second=0, microsecond=0) + timedelta(minutes=1)
        hour = next_minute.hour
        minute = next_minute.minute
        
        print(f"[TEST] –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:{minute:02d}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
        test_habit = f"–¢–µ—Å—Ç_{hour:02d}:{minute:02d}"
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if schedule_reminder(context, user_id, test_habit, f"{hour:02d}:{minute:02d}"):
            await update.message.reply_text(
                f"üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ**\n\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞: {test_habit}\n"
                f"–í—Ä–µ–º—è: {hour:02d}:{minute:02d} MSK\n"
                f"–°–µ–π—á–∞—Å: {now.strftime('%H:%M:%S')}\n\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —á–µ—Ä–µ–∑ ~{60 - now.second} —Å–µ–∫—É–Ω–¥",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"[TEST] –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"[TEST] Traceback: {traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def send_test_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    job = context.job
    user_id = job.data['user_id']
    
    try:
        print(f"[TEST] –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        await context.bot.send_message(
            chat_id=user_id,
            text="üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ",
            parse_mode='Markdown'
        )
        
        print(f"[TEST] –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"[TEST] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        import traceback
        print(f"[TEST] Traceback: {traceback.format_exc()}")

async def stats_entry(query, context):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")]])
        )
        return

    buttons = [
        [InlineKeyboardButton("üìà –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week")],
        [InlineKeyboardButton("üìä –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month")],
        [InlineKeyboardButton("üìâ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", callback_data="stats_all")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="clear_stats_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")]
    ]
    
    message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"
    
    await query.edit_message_text(
        message, 
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def show_stats(query, context, period):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if period == "week":
        days_back = 7
        period_name = "–Ω–µ–¥–µ–ª—é"
    elif period == "month":
        days_back = 30
        period_name = "–º–µ—Å—è—Ü"
    else:  # all
        days_back = 365
        period_name = "–≤—Å–µ –≤—Ä–µ–º—è"
    
    today = datetime.now()
    start_date = today - timedelta(days=days_back)
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period_name}**\n\n"
    
    for habit_name, habit_info in habits.items():
        if isinstance(habit_info, dict):
            dates = habit_info.get('dates', [])
        else:
            dates = habit_info
        
        # –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–∏–æ–¥–µ
        completed_in_period = 0
        for date_str in dates:
            try:
                date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                if date_obj >= start_date:
                    completed_in_period += 1
            except ValueError:
                continue
        
        if period == "all":
            # –î–ª—è –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Å –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if dates:
                first_date = min(dates)
                try:
                    first_date_obj = datetime.strptime(first_date, '%Y-%m-%d')
                    days_since_start = (today - first_date_obj).days + 1
                    possible_days = min(days_since_start, days_back)
                except ValueError:
                    possible_days = days_back
            else:
                possible_days = 0
        else:
            possible_days = days_back
        
        if possible_days > 0:
            percentage = (completed_in_period / possible_days) * 100
            stats_text += f"**{habit_name}**\n"
            stats_text += f"  ‚úÖ {completed_in_period}/{possible_days} –¥–Ω–µ–π ({percentage:.1f}%)\n\n"
    
    if not habits:
        stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    
    buttons = [
        [InlineKeyboardButton("üîô –ö –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞", callback_data="menu_stats")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_list")]
    ]
    
    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def manage_menu(query, context):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text(
            "‚úçÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")]])
        )
        return
    
    buttons = []
    for habit_name in habits.keys():
        buttons.append([InlineKeyboardButton(f"‚úèÔ∏è {habit_name}", callback_data=f"edit_habit|{habit_name}")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")])
    
    await query.edit_message_text(
        "‚úçÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def edit_habit_menu(query, context, habit_name):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_data = get_user_data(query.from_user.id)
    habit_info = user_data['habits'].get(habit_name, {})
    
    reminder_text = ""
    if isinstance(habit_info, dict):
        reminder_time = habit_info.get('reminder_time')
        if reminder_time:
            reminder_text = f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_time}"
        else:
            reminder_text = "\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    
    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_habit|{habit_name}")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"change_reminder|{habit_name}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data=f"delete_habit|{habit_name}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_manage")]
    ]
    
    await query.edit_message_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n**{habit_name}**{reminder_text}",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def delete_habit_confirm(query, context, habit_name):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete|{habit_name}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_habit|{habit_name}")
        ]
    ]
    
    await query.edit_message_text(
        f"üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É **{habit_name}**?\n\n–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def confirm_delete_habit(query, context, habit_name):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if habit_name in user_data['habits']:
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        job_name = f"reminder_{user_id}_{habit_name}"
        for job in context.application.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É
        del user_data['habits'][habit_name]
        update_user_data(user_id, user_data)
        
        await query.edit_message_text(
            f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ **{habit_name}** —É–¥–∞–ª–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await _send_habit_list(query, context)
    else:
        await query.edit_message_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def reminder_menu(query, context):
    """–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text(
            "‚è∞ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")]])
        )
        return

    message = "‚è∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏**\n\n"
    buttons = []
    
    for habit_name, habit_info in habits.items():
        if isinstance(habit_info, dict):
            reminder_time = habit_info.get('reminder_time')
            if reminder_time:
                status = f"üîî {reminder_time}"
            else:
                status = "üîï –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            status = "üîï –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        message += f"**{habit_name}**: {status}\n"
        buttons.append([InlineKeyboardButton(f"‚öôÔ∏è {habit_name}", callback_data=f"set_reminder|{habit_name}")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")])
    
    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def show_undo_menu(query, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text("–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
        return

    today = datetime.now().strftime('%Y-%m-%d')
    completed_habits = []
    
    for habit_name, habit_info in habits.items():
        dates = habit_info.get('dates', []) if isinstance(habit_info, dict) else habit_info
        if today in dates:
            completed_habits.append(habit_name)

    if not completed_habits:
        await query.edit_message_text(
            "‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_list")]])
        )
        return
    
    buttons = []
    for habit in completed_habits:
        buttons.append([InlineKeyboardButton(f"‚ùå {habit}", callback_data=f"undo|{habit}")])
    
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_today")])
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def change_reminder_for_habit(update, context):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    query = update.callback_query
    await query.answer()
    habit_name = query.data.split('|', 1)[1]
    context.user_data['setting_time_for'] = habit_name
    
    buttons = [
        [
            InlineKeyboardButton("üåÖ 09:00", callback_data="time_09:00"),
            InlineKeyboardButton("üåÑ 12:00", callback_data="time_12:00")
        ],
        [
            InlineKeyboardButton("üåá 18:00", callback_data="time_18:00"),
            InlineKeyboardButton("üåÉ 21:00", callback_data="time_21:00")
        ],
        [
            InlineKeyboardButton("‚è∞ –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom"),
            InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="time_disable")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_habit|{habit_name}")]
    ]
    
    await query.edit_message_text(
        f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{habit_name}¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )
    
    return SETTING_REMINDER_TIME

async def set_reminder_for_habit(update, context):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    habit_name = query.data.split('|', 1)[1]
    context.user_data['setting_time_for'] = habit_name
    
    buttons = [
        [
            InlineKeyboardButton("üåÖ 09:00", callback_data="time_09:00"),
            InlineKeyboardButton("üåÑ 12:00", callback_data="time_12:00")
        ],
        [
            InlineKeyboardButton("üåá 18:00", callback_data="time_18:00"),
            InlineKeyboardButton("üåÉ 21:00", callback_data="time_21:00")
        ],
        [
            InlineKeyboardButton("‚è∞ –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="time_custom"),
            InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="time_disable")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_reminder")]
    ]
    
    await query.edit_message_text(
        f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{habit_name}¬ª**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )
    
    return SETTING_REMINDER_TIME

async def rename_habit_start(update, context):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    query = update.callback_query
    await query.answer()
    habit_name = query.data.split('|', 1)[1]
    context.user_data['renaming_habit'] = habit_name
    
    await query.edit_message_text(
        f"‚úèÔ∏è **–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: **{habit_name}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode='Markdown'
    )
    
    return RENAMING_HABIT

async def handle_habit_rename(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    new_name = update.message.text.strip()
    old_name = context.user_data.get('renaming_habit')
    
    if not old_name:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    if not new_name:
        await update.message.reply_text(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return RENAMING_HABIT
    
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    if new_name in user_data.get('habits', {}) and new_name != old_name:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{new_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return RENAMING_HABIT
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
    if old_name in user_data.get('habits', {}):
        habit_data = user_data['habits'][old_name]
        del user_data['habits'][old_name]
        user_data['habits'][new_name] = habit_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if isinstance(habit_data, dict) and habit_data.get('reminder_time'):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            old_job_name = f"reminder_{user_id}_{old_name}"
            for job in context.application.job_queue.get_jobs_by_name(old_job_name):
                job.schedule_removal()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            schedule_reminder(context, user_id, new_name, habit_data['reminder_time'])
        
        update_user_data(user_id, user_data)
        
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: ¬´{old_name}¬ª ‚Üí ¬´{new_name}¬ª")
        
        context.user_data.pop('renaming_habit', None)
        
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É
        await list_habits(update, context)
    else:
        await update.message.reply_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    return ConversationHandler.END

async def cancel_rename(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_name = context.user_data.get('renaming_habit')
    
    if habit_name:
        await update.message.reply_text(f"‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ ¬´{habit_name}¬ª –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    context.user_data.pop('renaming_habit', None)
    await list_habits(update, context)
    return ConversationHandler.END

async def setup_commands(application: Application):
    try:
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π"),
            BotCommand("debug", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand("test", "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
            BotCommand("testquick", "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        ]
        await application.bot.set_my_commands(commands)
        print("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def clear_stats_menu(query, context):
    """–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_data = get_user_data(query.from_user.id)
    habits = user_data.get('habits', {})
    
    if not habits:
        await query.edit_message_text(
            "üóë –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_stats")]])
        )
        return

    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
    for habit_name in habits.keys():
        buttons.append([InlineKeyboardButton(f"üóë {habit_name}", callback_data=f"clear_habit|{habit_name}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    buttons.append([InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="clear_all_habits")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_stats")])
    
    await query.edit_message_text(
        "üóë **–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def clear_habit_confirm(query, context, habit_name):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data=f"confirm_clear_habit|{habit_name}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_stats_menu")
        ]
    ]
    
    await query.edit_message_text(
        f"üóë **–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ **{habit_name}**?\n\n–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def clear_all_habits_confirm(query, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    buttons = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear_all"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_stats_menu")
        ]
    ]
    
    await query.edit_message_text(
        "üóë **–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è **–≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫**?\n\n–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞!",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode='Markdown'
    )

async def confirm_clear_habit(query, context, habit_name):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    if habit_name in user_data['habits']:
        habit_info = user_data['habits'][habit_name]
        
        if isinstance(habit_info, dict):
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            user_data['habits'][habit_name]['dates'] = []
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏
            user_data['habits'][habit_name] = {
                'dates': [],
                'reminder_time': None
            }
        
        update_user_data(user_id, user_data)
        
        await query.edit_message_text(
            f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ **{habit_name}** –æ—á–∏—â–µ–Ω–∞.",
            parse_mode='Markdown'
        )
        
        # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É
        await clear_stats_menu(query, context)
    else:
        await query.edit_message_text("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def confirm_clear_all(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_id = query.from_user.id
    user_data = get_user_data(user_id)
    
    habits_cleared = 0
    for habit_name, habit_info in user_data['habits'].items():
        if isinstance(habit_info, dict):
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            user_data['habits'][habit_name]['dates'] = []
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞—Ç–∞–º–∏
            user_data['habits'][habit_name] = {
                'dates': [],
                'reminder_time': None
            }
        habits_cleared += 1
    
    update_user_data(user_id, user_data)
    
    await query.edit_message_text(
        f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è {habits_cleared} –ø—Ä–∏–≤—ã—á–µ–∫.",
        parse_mode='Markdown'
    )
    
    # –£–±–∏—Ä–∞–µ–º sleep - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É
    await stats_entry(query, context)

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    is_railway = os.getenv('RAILWAY_ENVIRONMENT') == 'production'
    if is_railway:
        print("üöÇ –ó–∞–ø—É—Å–∫ –Ω–∞ Railway")
    else:
        print("üíª –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        app_timezone = ZoneInfo('Europe/Moscow')  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    except Exception:
        app_timezone = ZoneInfo('UTC')  # Fallback –Ω–∞ UTC
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Å–µ—Ç–µ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    application = (
        ApplicationBuilder()
        .token(TOKEN)
        .connect_timeout(30 if is_railway else 10)
        .read_timeout(30 if is_railway else 10)
        .write_timeout(30 if is_railway else 10)
        .pool_timeout(30 if is_railway else 10)
        .build()
    )
    application.timezone = app_timezone
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("today", today))
    application.add_handler(CommandHandler("debug", debug_reminders))
    application.add_handler(CommandHandler("test", test_reminder))
    application.add_handler(CommandHandler("testquick", test_immediate_reminder))
    
    # ConversationHandler –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_new_habit_reminder, pattern="^new_habit_set_time$"),
            CallbackQueryHandler(handle_new_habit_reminder, pattern="^new_habit_skip$"),
            CallbackQueryHandler(change_reminder_for_habit, pattern="^change_reminder\\|"),
            CallbackQueryHandler(set_reminder_for_habit, pattern="^set_reminder\\|")
        ],
        states={
            SETTING_REMINDER_TIME: [
                CallbackQueryHandler(handle_time_selection, pattern="^time_"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_time_input)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_reminder_setup)
        ],
        per_chat=True,
        per_message=False,
        allow_reentry=True
    )
    application.add_handler(reminder_handler)
    
    # ConversationHandler –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
    rename_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(rename_habit_start, pattern="^rename_habit\\|")
        ],
        states={
            RENAMING_HABIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_habit_rename)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_rename)
        ],
        per_chat=True,
        per_message=False,
        allow_reentry=True
    )
    application.add_handler(rename_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ ConversationHandler)
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_habit_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    print(f"[INIT] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: {app_timezone}")
    print("[INIT] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
    
    try:
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ /start
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        application.run_polling(
            drop_pending_updates=True,
            poll_interval=1.0 if is_railway else 0.1,  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Railway
            timeout=20 if is_railway else 10          # –ë–æ–ª—å—à–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Railway
        )
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        print("üîÑ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main() 